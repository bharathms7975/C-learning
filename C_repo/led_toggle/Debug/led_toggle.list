
led_toggle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001f8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000380  08000388  00001388  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000380  08000380  00001388  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000380  08000380  00001388  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000380  08000388  00001388  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000380  08000380  00001380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000384  08000384  00001384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001388  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001388  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001388  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000142  00000000  00000000  000013b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000000cf  00000000  00000000  000014fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000050  00000000  00000000  000015d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000033  00000000  00000000  00001620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000f94  00000000  00000000  00001653  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000050e  00000000  00000000  000025e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003cbd  00000000  00000000  00002af5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000067b2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000084  00000000  00000000  000067f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  0000687c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000368 	.word	0x08000368

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000368 	.word	0x08000368

080001c8 <main>:
#endif

void delay(void);

int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
    /* Loop forever */
	//To enable the peripheral clock
	uint32_t *pClkCtrlReg = (uint32_t*)0x40023830;
 80001ce:	4b31      	ldr	r3, [pc, #196]	@ (8000294 <main+0xcc>)
 80001d0:	60bb      	str	r3, [r7, #8]
	//To select GPIOD mode register
	uint32_t *pPortMode = (uint32_t*)0x40020C00;
 80001d2:	4b31      	ldr	r3, [pc, #196]	@ (8000298 <main+0xd0>)
 80001d4:	607b      	str	r3, [r7, #4]
	//To enable GPIOD output data register
	uint32_t *pPortDOutReg = (uint32_t*)0x40020C14;
 80001d6:	4b31      	ldr	r3, [pc, #196]	@ (800029c <main+0xd4>)
 80001d8:	603b      	str	r3, [r7, #0]

	//enable clk for PORTD
	*pClkCtrlReg |= (1<<3);
 80001da:	68bb      	ldr	r3, [r7, #8]
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	f043 0208 	orr.w	r2, r3, #8
 80001e2:	68bb      	ldr	r3, [r7, #8]
 80001e4:	601a      	str	r2, [r3, #0]

	//clear mode and set 24th bit
	*pPortMode &= ~(0XFF<<24); // this clear the mode of this port
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	601a      	str	r2, [r3, #0]
	*pPortMode |= (0x55<<24); // in this step we set mode to GP output mode
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	f043 42aa 	orr.w	r2, r3, #1426063360	@ 0x55000000
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	601a      	str	r2, [r3, #0]



	//set 12th bit to turn on led

	for(int i=0; i<10; i++)
 80001fe:	2300      	movs	r3, #0
 8000200:	60fb      	str	r3, [r7, #12]
 8000202:	e042      	b.n	800028a <main+0xc2>
	{
		//turn on led
		*pPortDOutReg |= (1<<12);
 8000204:	683b      	ldr	r3, [r7, #0]
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800020c:	683b      	ldr	r3, [r7, #0]
 800020e:	601a      	str	r2, [r3, #0]
		delay();
 8000210:	f000 f846 	bl	80002a0 <delay>
		*pPortDOutReg &= ~(1<<12);
 8000214:	683b      	ldr	r3, [r7, #0]
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800021c:	683b      	ldr	r3, [r7, #0]
 800021e:	601a      	str	r2, [r3, #0]
		delay();
 8000220:	f000 f83e 	bl	80002a0 <delay>
		*pPortDOutReg |= (1<<13);
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800022c:	683b      	ldr	r3, [r7, #0]
 800022e:	601a      	str	r2, [r3, #0]
		delay();
 8000230:	f000 f836 	bl	80002a0 <delay>
		*pPortDOutReg &= ~(1<<13);
 8000234:	683b      	ldr	r3, [r7, #0]
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800023c:	683b      	ldr	r3, [r7, #0]
 800023e:	601a      	str	r2, [r3, #0]
		delay();
 8000240:	f000 f82e 	bl	80002a0 <delay>
		*pPortDOutReg |= (1<<14);
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800024c:	683b      	ldr	r3, [r7, #0]
 800024e:	601a      	str	r2, [r3, #0]
		delay();
 8000250:	f000 f826 	bl	80002a0 <delay>
		*pPortDOutReg &= ~(1<<14);
 8000254:	683b      	ldr	r3, [r7, #0]
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800025c:	683b      	ldr	r3, [r7, #0]
 800025e:	601a      	str	r2, [r3, #0]
		delay();
 8000260:	f000 f81e 	bl	80002a0 <delay>
		*pPortDOutReg |= (1<<15);
 8000264:	683b      	ldr	r3, [r7, #0]
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800026c:	683b      	ldr	r3, [r7, #0]
 800026e:	601a      	str	r2, [r3, #0]
		delay();
 8000270:	f000 f816 	bl	80002a0 <delay>
		*pPortDOutReg &= ~(1<<15);
 8000274:	683b      	ldr	r3, [r7, #0]
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	601a      	str	r2, [r3, #0]
		delay();
 8000280:	f000 f80e 	bl	80002a0 <delay>
	for(int i=0; i<10; i++)
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	3301      	adds	r3, #1
 8000288:	60fb      	str	r3, [r7, #12]
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	2b09      	cmp	r3, #9
 800028e:	ddb9      	ble.n	8000204 <main+0x3c>

	}



	for(;;);
 8000290:	bf00      	nop
 8000292:	e7fd      	b.n	8000290 <main+0xc8>
 8000294:	40023830 	.word	0x40023830
 8000298:	40020c00 	.word	0x40020c00
 800029c:	40020c14 	.word	0x40020c14

080002a0 <delay>:
}

void delay()
{
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
	for(int i=0; i<50000; i++);
 80002a6:	2300      	movs	r3, #0
 80002a8:	607b      	str	r3, [r7, #4]
 80002aa:	e002      	b.n	80002b2 <delay+0x12>
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	3301      	adds	r3, #1
 80002b0:	607b      	str	r3, [r7, #4]
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 80002b8:	4293      	cmp	r3, r2
 80002ba:	ddf7      	ble.n	80002ac <delay+0xc>
}
 80002bc:	bf00      	nop
 80002be:	bf00      	nop
 80002c0:	370c      	adds	r7, #12
 80002c2:	46bd      	mov	sp, r7
 80002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c8:	4770      	bx	lr
	...

080002cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002cc:	480d      	ldr	r0, [pc, #52]	@ (8000304 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ce:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002d0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002d4:	480c      	ldr	r0, [pc, #48]	@ (8000308 <LoopForever+0x6>)
  ldr r1, =_edata
 80002d6:	490d      	ldr	r1, [pc, #52]	@ (800030c <LoopForever+0xa>)
  ldr r2, =_sidata
 80002d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000310 <LoopForever+0xe>)
  movs r3, #0
 80002da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002dc:	e002      	b.n	80002e4 <LoopCopyDataInit>

080002de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002e2:	3304      	adds	r3, #4

080002e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002e8:	d3f9      	bcc.n	80002de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000314 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002ec:	4c0a      	ldr	r4, [pc, #40]	@ (8000318 <LoopForever+0x16>)
  movs r3, #0
 80002ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002f0:	e001      	b.n	80002f6 <LoopFillZerobss>

080002f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002f4:	3204      	adds	r2, #4

080002f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002f8:	d3fb      	bcc.n	80002f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002fa:	f000 f811 	bl	8000320 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002fe:	f7ff ff63 	bl	80001c8 <main>

08000302 <LoopForever>:

LoopForever:
  b LoopForever
 8000302:	e7fe      	b.n	8000302 <LoopForever>
  ldr   r0, =_estack
 8000304:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000308:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800030c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000310:	08000388 	.word	0x08000388
  ldr r2, =_sbss
 8000314:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000318:	2000001c 	.word	0x2000001c

0800031c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800031c:	e7fe      	b.n	800031c <ADC_IRQHandler>
	...

08000320 <__libc_init_array>:
 8000320:	b570      	push	{r4, r5, r6, lr}
 8000322:	4d0d      	ldr	r5, [pc, #52]	@ (8000358 <__libc_init_array+0x38>)
 8000324:	4c0d      	ldr	r4, [pc, #52]	@ (800035c <__libc_init_array+0x3c>)
 8000326:	1b64      	subs	r4, r4, r5
 8000328:	10a4      	asrs	r4, r4, #2
 800032a:	2600      	movs	r6, #0
 800032c:	42a6      	cmp	r6, r4
 800032e:	d109      	bne.n	8000344 <__libc_init_array+0x24>
 8000330:	4d0b      	ldr	r5, [pc, #44]	@ (8000360 <__libc_init_array+0x40>)
 8000332:	4c0c      	ldr	r4, [pc, #48]	@ (8000364 <__libc_init_array+0x44>)
 8000334:	f000 f818 	bl	8000368 <_init>
 8000338:	1b64      	subs	r4, r4, r5
 800033a:	10a4      	asrs	r4, r4, #2
 800033c:	2600      	movs	r6, #0
 800033e:	42a6      	cmp	r6, r4
 8000340:	d105      	bne.n	800034e <__libc_init_array+0x2e>
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f855 3b04 	ldr.w	r3, [r5], #4
 8000348:	4798      	blx	r3
 800034a:	3601      	adds	r6, #1
 800034c:	e7ee      	b.n	800032c <__libc_init_array+0xc>
 800034e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000352:	4798      	blx	r3
 8000354:	3601      	adds	r6, #1
 8000356:	e7f2      	b.n	800033e <__libc_init_array+0x1e>
 8000358:	08000380 	.word	0x08000380
 800035c:	08000380 	.word	0x08000380
 8000360:	08000380 	.word	0x08000380
 8000364:	08000384 	.word	0x08000384

08000368 <_init>:
 8000368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800036a:	bf00      	nop
 800036c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800036e:	bc08      	pop	{r3}
 8000370:	469e      	mov	lr, r3
 8000372:	4770      	bx	lr

08000374 <_fini>:
 8000374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000376:	bf00      	nop
 8000378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800037a:	bc08      	pop	{r3}
 800037c:	469e      	mov	lr, r3
 800037e:	4770      	bx	lr
