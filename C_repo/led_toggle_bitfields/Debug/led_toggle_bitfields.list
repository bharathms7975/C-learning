
led_toggle_bitfields.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001b0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000338  08000340  00001340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000338  08000338  00001340  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000338  08000338  00001340  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000338  08000340  00001340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000338  08000338  00001338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800033c  0800033c  0000133c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001340  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00001340  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000460  00000000  00000000  0000136a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000103  00000000  00000000  000017ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000050  00000000  00000000  000018d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000033  00000000  00000000  00001920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000f8c  00000000  00000000  00001953  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000004ea  00000000  00000000  000028df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003e91  00000000  00000000  00002dc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00006c5a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000084  00000000  00000000  00006ca0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  00006d24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000320 	.word	0x08000320

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000320 	.word	0x08000320

080001c8 <main>:
#include "main.h"

void delay(void);

int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
    /* Loop forever */
	//To enable the peripheral clock
	RCC_AHB1ENR_t volatile *const pClkCtrlReg = (RCC_AHB1ENR_t*)0x40023830;
 80001ce:	4b1f      	ldr	r3, [pc, #124]	@ (800024c <main+0x84>)
 80001d0:	60bb      	str	r3, [r7, #8]

	//To select GPIOD mode register
	GPIOx_MODER_t volatile *const GPIOD_MODE = (GPIOx_MODER_t*)0x40020C00;
 80001d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000250 <main+0x88>)
 80001d4:	607b      	str	r3, [r7, #4]

	//To enable GPIOD output data register
	GPIOx_ODR volatile *const GPIOD_ODR = (GPIOx_ODR*)0x40020C14;
 80001d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000254 <main+0x8c>)
 80001d8:	603b      	str	r3, [r7, #0]


	pClkCtrlReg->gpiod_en = 1;
 80001da:	68ba      	ldr	r2, [r7, #8]
 80001dc:	6813      	ldr	r3, [r2, #0]
 80001de:	f043 0308 	orr.w	r3, r3, #8
 80001e2:	6013      	str	r3, [r2, #0]
	GPIOD_MODE->mode_en12 = 1;
 80001e4:	687a      	ldr	r2, [r7, #4]
 80001e6:	6813      	ldr	r3, [r2, #0]
 80001e8:	2101      	movs	r1, #1
 80001ea:	f361 6319 	bfi	r3, r1, #24, #2
 80001ee:	6013      	str	r3, [r2, #0]
	GPIOD_MODE->mode_en13 = 1;
 80001f0:	687a      	ldr	r2, [r7, #4]
 80001f2:	6813      	ldr	r3, [r2, #0]
 80001f4:	2101      	movs	r1, #1
 80001f6:	f361 639b 	bfi	r3, r1, #26, #2
 80001fa:	6013      	str	r3, [r2, #0]


	for(int i=0; i<10; i++)
 80001fc:	2300      	movs	r3, #0
 80001fe:	60fb      	str	r3, [r7, #12]
 8000200:	e01e      	b.n	8000240 <main+0x78>
	{
	GPIOD_ODR->odr12 = 1;
 8000202:	683a      	ldr	r2, [r7, #0]
 8000204:	8813      	ldrh	r3, [r2, #0]
 8000206:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800020a:	8013      	strh	r3, [r2, #0]
	delay();
 800020c:	f000 f824 	bl	8000258 <delay>
	GPIOD_ODR->odr12 = 0;
 8000210:	683a      	ldr	r2, [r7, #0]
 8000212:	8813      	ldrh	r3, [r2, #0]
 8000214:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000218:	8013      	strh	r3, [r2, #0]
	delay();
 800021a:	f000 f81d 	bl	8000258 <delay>
	GPIOD_ODR->odr13 = 1;
 800021e:	683a      	ldr	r2, [r7, #0]
 8000220:	8813      	ldrh	r3, [r2, #0]
 8000222:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000226:	8013      	strh	r3, [r2, #0]
	delay();
 8000228:	f000 f816 	bl	8000258 <delay>
	GPIOD_ODR->odr13 = 0;
 800022c:	683a      	ldr	r2, [r7, #0]
 800022e:	8813      	ldrh	r3, [r2, #0]
 8000230:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000234:	8013      	strh	r3, [r2, #0]
	delay();
 8000236:	f000 f80f 	bl	8000258 <delay>
	for(int i=0; i<10; i++)
 800023a:	68fb      	ldr	r3, [r7, #12]
 800023c:	3301      	adds	r3, #1
 800023e:	60fb      	str	r3, [r7, #12]
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	2b09      	cmp	r3, #9
 8000244:	dddd      	ble.n	8000202 <main+0x3a>
	}



	for(;;);
 8000246:	bf00      	nop
 8000248:	e7fd      	b.n	8000246 <main+0x7e>
 800024a:	bf00      	nop
 800024c:	40023830 	.word	0x40023830
 8000250:	40020c00 	.word	0x40020c00
 8000254:	40020c14 	.word	0x40020c14

08000258 <delay>:
}

void delay()
{
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
	for(int i=0; i<100000; i++);
 800025e:	2300      	movs	r3, #0
 8000260:	607b      	str	r3, [r7, #4]
 8000262:	e002      	b.n	800026a <delay+0x12>
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	3301      	adds	r3, #1
 8000268:	607b      	str	r3, [r7, #4]
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	4a04      	ldr	r2, [pc, #16]	@ (8000280 <delay+0x28>)
 800026e:	4293      	cmp	r3, r2
 8000270:	ddf8      	ble.n	8000264 <delay+0xc>
}
 8000272:	bf00      	nop
 8000274:	bf00      	nop
 8000276:	370c      	adds	r7, #12
 8000278:	46bd      	mov	sp, r7
 800027a:	bc80      	pop	{r7}
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop
 8000280:	0001869f 	.word	0x0001869f

08000284 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000284:	480d      	ldr	r0, [pc, #52]	@ (80002bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000286:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000288:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800028c:	480c      	ldr	r0, [pc, #48]	@ (80002c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800028e:	490d      	ldr	r1, [pc, #52]	@ (80002c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000290:	4a0d      	ldr	r2, [pc, #52]	@ (80002c8 <LoopForever+0xe>)
  movs r3, #0
 8000292:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000294:	e002      	b.n	800029c <LoopCopyDataInit>

08000296 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000296:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000298:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800029a:	3304      	adds	r3, #4

0800029c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800029c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800029e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002a0:	d3f9      	bcc.n	8000296 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002a2:	4a0a      	ldr	r2, [pc, #40]	@ (80002cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80002a4:	4c0a      	ldr	r4, [pc, #40]	@ (80002d0 <LoopForever+0x16>)
  movs r3, #0
 80002a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002a8:	e001      	b.n	80002ae <LoopFillZerobss>

080002aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002ac:	3204      	adds	r2, #4

080002ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002b0:	d3fb      	bcc.n	80002aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002b2:	f000 f811 	bl	80002d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002b6:	f7ff ff87 	bl	80001c8 <main>

080002ba <LoopForever>:

LoopForever:
  b LoopForever
 80002ba:	e7fe      	b.n	80002ba <LoopForever>
  ldr   r0, =_estack
 80002bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002c4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002c8:	08000340 	.word	0x08000340
  ldr r2, =_sbss
 80002cc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002d0:	2000001c 	.word	0x2000001c

080002d4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002d4:	e7fe      	b.n	80002d4 <ADC_IRQHandler>
	...

080002d8 <__libc_init_array>:
 80002d8:	b570      	push	{r4, r5, r6, lr}
 80002da:	4d0d      	ldr	r5, [pc, #52]	@ (8000310 <__libc_init_array+0x38>)
 80002dc:	4c0d      	ldr	r4, [pc, #52]	@ (8000314 <__libc_init_array+0x3c>)
 80002de:	1b64      	subs	r4, r4, r5
 80002e0:	10a4      	asrs	r4, r4, #2
 80002e2:	2600      	movs	r6, #0
 80002e4:	42a6      	cmp	r6, r4
 80002e6:	d109      	bne.n	80002fc <__libc_init_array+0x24>
 80002e8:	4d0b      	ldr	r5, [pc, #44]	@ (8000318 <__libc_init_array+0x40>)
 80002ea:	4c0c      	ldr	r4, [pc, #48]	@ (800031c <__libc_init_array+0x44>)
 80002ec:	f000 f818 	bl	8000320 <_init>
 80002f0:	1b64      	subs	r4, r4, r5
 80002f2:	10a4      	asrs	r4, r4, #2
 80002f4:	2600      	movs	r6, #0
 80002f6:	42a6      	cmp	r6, r4
 80002f8:	d105      	bne.n	8000306 <__libc_init_array+0x2e>
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000300:	4798      	blx	r3
 8000302:	3601      	adds	r6, #1
 8000304:	e7ee      	b.n	80002e4 <__libc_init_array+0xc>
 8000306:	f855 3b04 	ldr.w	r3, [r5], #4
 800030a:	4798      	blx	r3
 800030c:	3601      	adds	r6, #1
 800030e:	e7f2      	b.n	80002f6 <__libc_init_array+0x1e>
 8000310:	08000338 	.word	0x08000338
 8000314:	08000338 	.word	0x08000338
 8000318:	08000338 	.word	0x08000338
 800031c:	0800033c 	.word	0x0800033c

08000320 <_init>:
 8000320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000322:	bf00      	nop
 8000324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000326:	bc08      	pop	{r3}
 8000328:	469e      	mov	lr, r3
 800032a:	4770      	bx	lr

0800032c <_fini>:
 800032c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800032e:	bf00      	nop
 8000330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000332:	bc08      	pop	{r3}
 8000334:	469e      	mov	lr, r3
 8000336:	4770      	bx	lr
